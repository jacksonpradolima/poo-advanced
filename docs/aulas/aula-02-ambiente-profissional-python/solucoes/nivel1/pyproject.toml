[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aula-02-ambiente-profissional"
version = "1.0.0"
description = "Demonstração prática de ambiente profissional Python"
readme = "README.md"
requires-python = ">=3.12"
license = { text = "MIT" }
authors = [
    { name = "Jackson Antonio do Prado Lima", email = "jackson@exemplo.com" },
]
keywords = ["python", "educação", "poo", "desenvolvimento-profissional"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Education",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Dependências do projeto
dependencies = [
    # Nenhuma dependência externa para demonstrar conceitos básicos
]

# Dependências opcionais para diferentes cenários de uso
[project.optional-dependencies]
# Dependências para desenvolvimento
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "mypy>=1.5.0",
    "ruff>=0.0.284",
    "pre-commit>=3.3.0",
]

# Dependências para documentação
docs = [
    "pdoc>=14.0.0",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
]

# Dependências para análise de qualidade
quality = [
    "ruff>=0.0.284",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]

# Dependências para testes avançados
testing = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.11.0",
    "hypothesis>=6.82.0",
]

# Todas as dependências de desenvolvimento
all = [
    "aula-02-ambiente-profissional[dev,docs,quality,testing]",
]

[project.urls]
Homepage = "https://github.com/jackson-lima/poo-advanced"
Documentation = "https://github.com/jackson-lima/poo-advanced/docs"
Repository = "https://github.com/jackson-lima/poo-advanced.git"
Issues = "https://github.com/jackson-lima/poo-advanced/issues"

# Scripts de linha de comando
[project.scripts]
calc-impostos = "solucoes.nivel1.calculadora_impostos_solucao:main"
gerenciador-tarefas = "solucoes.nivel1.gerenciador_tarefas_solucao:main"

# ================================
# CONFIGURAÇÃO DE FERRAMENTAS
# ================================

# Configuração do Ruff (linter + formatter)
[tool.ruff]
# Diretórios a serem analisados
src = ["solucoes", "exercicios"]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    "htmlcov",
]

# Configurações gerais
line-length = 88
target-version = "py312"
fix = true

# Regras de linting habilitadas
[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "SIM", # flake8-simplify
    "S",   # bandit (security)
    "A",   # flake8-builtins
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
]

ignore = [
    "S101",  # Use of assert detected (OK em testes)
    "S603",  # subprocess call sem shell=True (OK para casos específicos)
    "EM101", # String literal em exception (OK para mensagens simples)
    "EM102", # f-string em exception (OK para interpolação)
]

# Configurações por tipo de arquivo
[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "S101",  # Asserts são necessários em testes
    "PLR2004", # Magic values são OK em testes
]
"**/exercicios/**" = [
    "S101",  # Asserts podem ser usados em exercícios educacionais
]

# Configuração de imports
[tool.ruff.lint.isort]
known-first-party = ["calculadora_impostos_solucao", "gerenciador_tarefas_solucao"]
force-sort-within-sections = true
split-on-trailing-comma = true

# Configuração do formatador
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Configuração do MyPy (verificação de tipos)
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Configurações para módulos externos sem tipos
[[tool.mypy.overrides]]
module = [
    "pytest.*",
    "hypothesis.*",
]
ignore_missing_imports = true

# Configuração do Pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",                    # Mostrar resumo de todos os resultados
    "--strict-markers",       # Markers não registrados são erro
    "--strict-config",        # Configurações inválidas são erro
    "--cov=solucoes",        # Cobertura de código
    "--cov-report=term-missing", # Mostrar linhas não cobertas
    "--cov-report=html",      # Relatório HTML
    "--cov-fail-under=90",    # Falhar se cobertura < 90%
    "-v",                     # Verbose
]

testpaths = [
    "solucoes",
    "exercicios",
]

markers = [
    "slow: marca testes que demoram mais para executar",
    "integration: testes de integração",
    "unit: testes unitários",
    "benchmark: testes de performance",
]

# Filtros de warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Configuração de cobertura
[tool.coverage.run]
source = ["solucoes"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Configuração do Bandit (segurança)
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
tests = ["B201", "B301", "B302", "B303", "B304", "B305", "B306", "B307", "B313", "B314", "B315", "B316", "B317", "B318", "B319", "B320", "B325", "B601", "B602", "B603", "B604", "B605", "B606", "B607", "B608", "B609", "B610", "B611", "B701", "B702", "B703"]
skips = ["B101", "B601"]  # Skip assert_used e shell_injection para casos específicos

# Configuração do Hatch (build system)
[tool.hatch.version]
path = "solucoes/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/solucoes",
    "/exercicios",
    "/README.md",
    "/pyproject.toml",
]

[tool.hatch.build.targets.wheel]
packages = ["solucoes"]

# ================================
# SCRIPTS E COMANDOS ÚTEIS
# ================================

# Configuração para executar comandos comuns via hatch
[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.0",
    "ruff>=0.0.284",
]

[tool.hatch.envs.default.scripts]
# Executar testes
test = "pytest {args}"
test-cov = "pytest --cov=solucoes --cov-report=html --cov-report=term {args}"
test-fast = "pytest -x --lf {args}"

# Análise de qualidade
lint = "ruff check {args:.}"
format = "ruff format {args:.}"
format-check = "ruff format --check {args:.}"
typecheck = "mypy {args:solucoes}"

# Comando completo de verificação
check = [
    "lint",
    "format-check", 
    "typecheck",
    "test-cov",
]

# Documentação
docs-build = "pdoc --html --output-dir docs/ solucoes"
docs-serve = "pdoc --http localhost:8080 solucoes"

# Limpeza
clean = [
    "rm -rf .pytest_cache",
    "rm -rf .mypy_cache", 
    "rm -rf htmlcov",
    "rm -rf dist",
    "rm -rf *.egg-info",
    "find . -type d -name __pycache__ -exec rm -rf {} +",
    "find . -type f -name '*.pyc' -delete",
]

# Ambiente de desenvolvimento
[tool.hatch.envs.dev]
dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.11.0",
    "mypy>=1.5.0",
    "ruff>=0.0.284",
    "pre-commit>=3.3.0",
    "pdoc>=14.0.0",
    "ipython>=8.14.0",
    "jupyterlab>=4.0.0",
]

[tool.hatch.envs.dev.scripts]
# Comandos específicos para desenvolvimento
setup-hooks = "pre-commit install"
benchmark = "pytest --benchmark-only {args}"
profile = "python -m cProfile -o profile.stats {args}"
notebook = "jupyter lab"
shell = "ipython"

# Ambiente para CI/CD
[tool.hatch.envs.ci]
dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.0",
    "ruff>=0.0.284",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]

[tool.hatch.envs.ci.scripts]
# Comandos para integração contínua
security = "bandit -r solucoes"
deps-check = "safety check"
ci-check = [
    "ruff check .",
    "ruff format --check .",
    "mypy solucoes",
    "security", 
    "deps-check",
    "pytest --cov=solucoes --cov-fail-under=90",
]

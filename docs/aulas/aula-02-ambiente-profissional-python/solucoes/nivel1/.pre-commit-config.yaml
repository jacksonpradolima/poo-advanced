# Configura√ß√£o do Pre-commit Hooks
# ================================
# 
# Este arquivo demonstra como configurar hooks autom√°ticos que executam
# verifica√ß√µes de qualidade antes de cada commit, garantindo que apenas
# c√≥digo de alta qualidade seja enviado para o reposit√≥rio.
#
# Instala√ß√£o: pre-commit install
# Execu√ß√£o manual: pre-commit run --all-files
# Atualiza√ß√£o: pre-commit autoupdate

repos:
  # ================================
  # HOOKS B√ÅSICOS DE QUALIDADE
  # ================================
  
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # Verifica sintaxe de arquivos YAML
      - id: check-yaml
        name: üîç Verificar sintaxe YAML
        
      # Verifica sintaxe de arquivos TOML
      - id: check-toml
        name: üîç Verificar sintaxe TOML
        
      # Verifica sintaxe de arquivos JSON
      - id: check-json
        name: üîç Verificar sintaxe JSON
        
      # Remove espa√ßos em branco no final das linhas
      - id: trailing-whitespace
        name: ‚úÇÔ∏è  Remover espa√ßos em branco
        args: [--markdown-linebreak-ext=md]
        
      # Garante que arquivos terminam com nova linha
      - id: end-of-file-fixer
        name: üìù Corrigir final de arquivo
        
      # Verifica se h√° conflitos de merge n√£o resolvidos
      - id: check-merge-conflict
        name: üîç Verificar conflitos de merge
        
      # Verifica se arquivos Python s√£o v√°lidos sintaticamente
      - id: check-ast
        name: üêç Verificar sintaxe Python
        
      # Verifica se h√° imports duplicados ou n√£o utilizados
      - id: check-added-large-files
        name: üì¶ Verificar arquivos grandes
        args: ['--maxkb=500']  # Limite de 500KB
        
      # Verifica se h√° credenciais privadas commitadas
      - id: detect-private-key
        name: üîê Detectar chaves privadas
        
      # Verifica se h√° debugging statements
      - id: debug-statements
        name: üêõ Detectar statements de debug

  # ================================
  # RUFF - LINTING E FORMATA√á√ÉO
  # ================================
  
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.0.284
    hooks:
      # Linting com Ruff (substitui flake8, isort, etc.)
      - id: ruff
        name: üîç Ruff Linter
        args: [--fix, --exit-non-zero-on-fix]
        types: [python]
        
      # Formata√ß√£o de c√≥digo com Ruff
      - id: ruff-format
        name: üé® Ruff Formatter
        types: [python]

  # ================================
  # MYPY - VERIFICA√á√ÉO DE TIPOS
  # ================================
  
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        name: üîç MyPy - Verifica√ß√£o de tipos
        additional_dependencies: [types-all]
        args: [--ignore-missing-imports, --strict]
        exclude: ^(docs/|tests/fixtures/)

  # ================================
  # BANDIT - VERIFICA√á√ÉO DE SEGURAN√áA
  # ================================
  
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: üîê Bandit - Verifica√ß√£o de seguran√ßa
        args: [-r, --format, custom, --skip, B101,B601]
        exclude: ^tests/

  # ================================
  # SAFETY - VERIFICA√á√ÉO DE DEPEND√äNCIAS
  # ================================
  
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        name: üõ°Ô∏è  Safety - Verificar depend√™ncias vulner√°veis

  # ================================
  # COMMITIZEN - PADRONIZA√á√ÉO DE COMMITS
  # ================================
  
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.6.0
    hooks:
      - id: commitizen
        name: üìù Commitizen - Verificar formato de commit
        stages: [commit-msg]

  # ================================
  # PRETTIER - FORMATA√á√ÉO DE ARQUIVOS N√ÉO-PYTHON
  # ================================
  
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.1
    hooks:
      - id: prettier
        name: üé® Prettier - Formatar Markdown/JSON/YAML
        types_or: [markdown, json, yaml]
        exclude: ^(\.vscode/|\.idea/)

  # ================================
  # HOOKS CUSTOMIZADOS ESPEC√çFICOS DO PROJETO
  # ================================
  
  - repo: local
    hooks:
      # Verificar se todos os m√≥dulos t√™m __init__.py
      - id: check-init-files
        name: üì¶ Verificar arquivos __init__.py
        entry: python -c "
          import os
          import sys
          dirs_with_py = set()
          for root, dirs, files in os.walk('.'):
              if any(f.endswith('.py') for f in files):
                  dirs_with_py.add(root)
          
          missing_init = []
          for d in dirs_with_py:
              if d != '.' and not os.path.exists(os.path.join(d, '__init__.py')):
                  missing_init.append(d)
          
          if missing_init:
              print('Diret√≥rios Python sem __init__.py:')
              for d in missing_init:
                  print(f'  - {d}')
              sys.exit(1)
          "
        language: system
        pass_filenames: false
        files: \.py$
        
      # Verificar se documenta√ß√£o est√° atualizada
      - id: check-docstrings
        name: üìö Verificar docstrings
        entry: python -c "
          import ast
          import sys
          
          def check_docstring(filename):
              with open(filename, 'r', encoding='utf-8') as f:
                  try:
                      tree = ast.parse(f.read())
                  except SyntaxError:
                      return []
              
              missing = []
              for node in ast.walk(tree):
                  if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                      if (not ast.get_docstring(node) and 
                          not node.name.startswith('_') and
                          not (isinstance(node, ast.FunctionDef) and 
                               node.name in ['setUp', 'tearDown'])):
                          missing.append(f'{filename}:{node.lineno} - {node.name}')
              return missing
          
          all_missing = []
          for filename in sys.argv[1:]:
              if filename.endswith('.py'):
                  all_missing.extend(check_docstring(filename))
          
          if all_missing:
              print('Fun√ß√µes/classes sem docstring:')
              for item in all_missing:
                  print(f'  - {item}')
              sys.exit(1)
          "
        language: system
        files: \.py$
        exclude: ^(tests?/|.*test.*\.py$)
        
      # Verificar se h√° TODOs no c√≥digo
      - id: check-todos
        name: üìù Verificar TODOs pendentes
        entry: python -c "
          import sys
          import re
          
          todo_pattern = re.compile(r'(TODO|FIXME|XXX|HACK)(?!.*# OK)', re.IGNORECASE)
          found_todos = []
          
          for filename in sys.argv[1:]:
              try:
                  with open(filename, 'r', encoding='utf-8') as f:
                      for line_num, line in enumerate(f, 1):
                          if todo_pattern.search(line):
                              found_todos.append(f'{filename}:{line_num} - {line.strip()}')
              except UnicodeDecodeError:
                  continue
          
          if found_todos:
              print('TODOs encontrados (remova ou adicione # OK se intencional):')
              for todo in found_todos:
                  print(f'  - {todo}')
              print()
              print('Dica: Para manter um TODO, adicione # OK no final da linha')
              sys.exit(1)
          "
        language: system
        files: \.(py|md|txt|yaml|yml|toml)$
        
      # Executar testes r√°pidos
      - id: run-tests
        name: üß™ Executar testes r√°pidos
        entry: python -m pytest -x --lf -q
        language: system
        pass_filenames: false
        files: \.py$
        stages: [pre-push]  # S√≥ executa no pre-push, n√£o em todo commit

# ================================
# CONFIGURA√á√ïES GLOBAIS
# ================================

# Configura√ß√µes do pre-commit
default_stages: [commit, merge-commit]
default_language_version:
  python: python3.12

# Exclude patterns - arquivos/diret√≥rios ignorados
exclude: |
  (?x)^(
      \.vscode/|
      \.idea/|
      \.git/|
      __pycache__/|
      \.pytest_cache/|
      \.mypy_cache/|
      htmlcov/|
      \.coverage|
      dist/|
      build/|
      .*\.egg-info/|
      venv/|
      \.venv/|
      env/|
      \.env
  )$

# Configura√ß√£o para CI - hooks mais rigorosos
ci:
  autofix_commit_msg: |
    ü§ñ [pre-commit] auto-fixes aplicados
    
    Hooks executados:
    - Formata√ß√£o de c√≥digo
    - Corre√ß√£o de imports
    - Remo√ß√£o de espa√ßos em branco
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: 'üîÑ [pre-commit] Atualiza√ß√£o autom√°tica de hooks'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

#!/usr/bin/env python3
"""
Sistema de E-commerce SOLID - Solu√ß√£o Completa do Exerc√≠cio 2.1

CONTEXTO EDUCACIONAL: Este sistema demonstra a implementa√ß√£o pr√°tica de todos
os princ√≠pios SOLID em um projeto real de e-commerce, servindo como exemplo
abrangente de arquitetura de software bem estruturada.

PRINC√çPIOS SOLID DEMONSTRADOS:
‚úÖ SRP (Single Responsibility Principle)
   - Cada classe tem uma responsabilidade espec√≠fica e bem definida
   - Entidades, Value Objects, Servi√ßos e Reposit√≥rios focados

‚úÖ OCP (Open/Closed Principle)  
   - Sistema extens√≠vel atrav√©s de interfaces e heran√ßa
   - Novas estrat√©gias e tipos podem ser adicionados sem modifica√ß√£o

‚úÖ LSP (Liskov Substitution Principle)
   - Subtipos respeitam contratos dos tipos base
   - Produtos, estrat√©gias e implementa√ß√µes s√£o substitu√≠veis

‚úÖ ISP (Interface Segregation Principle)
   - Interfaces pequenas e focadas em responsabilidades espec√≠ficas
   - Clientes dependem apenas do que realmente usam

‚úÖ DIP (Dependency Inversion Principle)
   - M√≥dulos de alto n√≠vel n√£o dependem de detalhes de implementa√ß√£o
   - Depend√™ncias injetadas atrav√©s de abstra√ß√µes

ARQUITETURA:
- Domain Layer: Entidades e Value Objects com regras de neg√≥cio
- Service Layer: Casos de uso e coordena√ß√£o de opera√ß√µes
- Infrastructure Layer: Implementa√ß√µes concretas e adaptadores

PADR√ïES DE DESIGN:
- Strategy: Descontos, pagamentos, frete
- Factory: Cria√ß√£o de produtos e infraestrutura  
- Observer: Eventos de dom√≠nio
- Repository: Abstra√ß√£o de persist√™ncia
- Adapter: Integra√ß√£o com sistemas externos

TECNOLOGIAS:
- Python 3.12+ com type hints
- Decimal para precis√£o monet√°ria
- UUID para identificadores √∫nicos
- Logging para rastreabilidade
- Unittest para testes abrangentes

ESTRUTURA DO PROJETO:
domain/
‚îú‚îÄ‚îÄ entities.py      # Entidades de neg√≥cio
‚îî‚îÄ‚îÄ value_objects.py # Objetos de valor

services/
‚îî‚îÄ‚îÄ __init__.py      # Servi√ßos de aplica√ß√£o

infrastructure/
‚îî‚îÄ‚îÄ __init__.py      # Implementa√ß√µes concretas

main.py              # Demonstra√ß√£o completa
test_sistema.py      # Suite de testes

INSTRU√á√ïES DE USO:
1. Execute main.py para ver demonstra√ß√£o completa
2. Execute test_sistema.py para rodar testes
3. Analise o c√≥digo para entender implementa√ß√£o dos princ√≠pios

AUTOR: Prof. Jackson Antonio do Prado Lima
DATA: 2024-12-19
VERS√ÉO: 1.0
LICEN√áA: Educacional - Uso acad√™mico
"""

# Metadados do pacote
__version__ = "1.0.0"
__author__ = "Prof. Jackson Antonio do Prado Lima"
__email__ = "jackson.lima@professor.edu.br"
__status__ = "Educational"

def obter_info_sistema() -> dict:
    """
    Retorna informa√ß√µes sobre o sistema e sua arquitetura.
    
    Returns:
        Dict com metadados do sistema, princ√≠pios implementados
        e estat√≠sticas de componentes.
    """
    return {
        'nome': 'Sistema E-commerce SOLID',
        'versao': __version__,
        'autor': __author__,
        'descricao': 'Implementa√ß√£o educacional demonstrando princ√≠pios SOLID',
        
        'principios_solid': {
            'srp': 'Cada classe tem responsabilidade √∫nica',
            'ocp': 'Extens√≠vel sem modifica√ß√£o de c√≥digo existente', 
            'lsp': 'Subtipos substituem tipos base corretamente',
            'isp': 'Interfaces segregadas por responsabilidade',
            'dip': 'Depend√™ncias invertidas via abstra√ß√µes'
        },
        
        'padroes_design': [
            'Strategy (descontos, pagamentos)', 
            'Factory (cria√ß√£o de objetos)',
            'Observer (eventos de dom√≠nio)',
            'Repository (abstra√ß√£o de dados)',
            'Adapter (integra√ß√£o externa)',
            'Domain-Driven Design'
        ],
        
        'componentes': {
            'entidades': 6,  # Produto+subtipos, Cliente, Pedido, etc
            'value_objects': 8,  # Dinheiro, Endereco, etc
            'servicos': 4,  # Gest√£o produtos/clientes/pedidos/notifica√ß√µes
            'repositorios': 3,  # Produto, Cliente, Pedido
            'gateways': 3,  # Pagamento, Notifica√ß√£o, Frete
            'estrategias': 3  # Tipos de desconto
        },
        
        'arquitetura': {
            'camadas': ['Domain', 'Service', 'Infrastructure'],
            'padrao': 'Hexagonal Architecture',
            'inversao_dependencias': True,
            'testabilidade': 'Alta',
            'extensibilidade': 'Alta'
        }
    }


# Exemplo de uso r√°pido (para testes)
if __name__ == "__main__":
    import pprint
    
    print("üè™ SISTEMA E-COMMERCE SOLID")
    print("=" * 50)
    
    info = obter_info_sistema()
    pprint.pprint(info, width=70)
    
    print("
‚úÖ Sistema carregado com sucesso!")
    print("   Execute main.py para demonstra√ß√£o completa")
    print("   Execute test_sistema.py para rodar testes")

# Importa√ß√µes para facilitar uso do pacote
from .domain.entities import *
from .domain.value_objects import *
from .services.interfaces import *
from .services.implementations import *
from .infrastructure.adapters import *
from .main import demonstrar_ecommerce_solid

__all__ = [
    # Domain
    'Produto', 'ProdutoFisico', 'ProdutoDigital', 'ProdutoServico',
    'Pedido', 'Cliente',
    
    # Value Objects
    'Dinheiro', 'Endereco', 'DimensoesProduto',
    
    # Services
    'CalculadoraFrete', 'ProcessadorPagamento', 'ServicoNotificacao',
    'FabricaProdutos', 'GerenciadorPedidos',
    
    # Infrastructure
    'AdaptadorPayPal', 'AdaptadorStripe', 'NotificacaoEmail', 'NotificacaoSMS',
    
    # Demo
    'demonstrar_ecommerce_solid'
]
